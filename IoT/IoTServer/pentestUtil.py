import os
import socket
import config
import re
from logtail import LogtailHandler
import config
import logging

LHOST = config.ip

LPORT = 4205

handler = LogtailHandler(source_token=config.source_token)

logger = logging.getLogger(__name__)
logger.handlers = []
logger.setLevel(logging.INFO)
logger.addHandler(handler)

'''
    iptables -A INPUT -p tcp -j ACCEPT -s $ip --dport 22
    iptables -A INPUT -p tcp -j ACCEPT -s $ip --dport 1337
'''

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind((LHOST, LPORT))
server.listen(5)
print('Started PenTest Util Socket.')

def main():
    while 1:
        print("Util socket waiting for connection...")
        (conn, address) = server.accept()
        conn.send(b"=============================================================================================================\n")
        conn.send(b"IMPORTANT - This utility is only meant to facilitate PenTesting.\nDo not attack this as this is not in scope.\n")
        conn.send(b"=============================================================================================================\n")
        while 1:
            conn.send(b"Please enter your IP address (ON NUS network, e.g. 192.168.232.100): ")
            try:
                data = conn.recv(1024)
            except ConnectionResetError:
                    conn.close()
                    break
            whitelist_ip = data.decode().strip()
            match = re.match(r'^([0-9]{1,3}\.){3}[0-9]{1,3}$', whitelist_ip)
            if match:
                print(match.group(0))
                iptables_command = "iptables -A INPUT -p tcp -j ACCEPT -s " + whitelist_ip + " --dport 22"
                os.system(iptables_command)
                iptables_command = "iptables -A INPUT -p tcp -j ACCEPT -s " + whitelist_ip + " --dport 1337"
                os.system(iptables_command)
                logger.info("IP address added", extra={'whitelist_ip': whitelist_ip})
                conn.send(b"Your IP address has been whitelisted. Try to connect to the SSH and the IoT Service port to sanity check.\nElse, notify the admin.\n")
            else:
                conn.send(b"Invalid IP address, try again...\n")

if __name__ == "__main__":
    while 1:
        try:
            main()
        except KeyboardInterrupt:
            exit()
        except:
            continue
